// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/v1/ticketscoring.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketScoring_GetOverallQualityScore_FullMethodName         = "/ticketscoring.v1.TicketScoring/GetOverallQualityScore"
	TicketScoring_GetAggregatedCategoryScores_FullMethodName    = "/ticketscoring.v1.TicketScoring/GetAggregatedCategoryScores"
	TicketScoring_GetScoresByTicket_FullMethodName              = "/ticketscoring.v1.TicketScoring/GetScoresByTicket"
	TicketScoring_GetPeriodOverPeriodScoreChange_FullMethodName = "/ticketscoring.v1.TicketScoring/GetPeriodOverPeriodScoreChange"
)

// TicketScoringClient is the client API for TicketScoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketScoringClient interface {
	GetOverallQualityScore(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*OverallQualityScoreResponse, error)
	GetAggregatedCategoryScores(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*AggregatedCategoryScoresResponse, error)
	GetScoresByTicket(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*ScoresByTicketResponse, error)
	GetPeriodOverPeriodScoreChange(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*PeriodOverPeriodScoreChangeResponse, error)
}

type ticketScoringClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketScoringClient(cc grpc.ClientConnInterface) TicketScoringClient {
	return &ticketScoringClient{cc}
}

func (c *ticketScoringClient) GetOverallQualityScore(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*OverallQualityScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverallQualityScoreResponse)
	err := c.cc.Invoke(ctx, TicketScoring_GetOverallQualityScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketScoringClient) GetAggregatedCategoryScores(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*AggregatedCategoryScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregatedCategoryScoresResponse)
	err := c.cc.Invoke(ctx, TicketScoring_GetAggregatedCategoryScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketScoringClient) GetScoresByTicket(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*ScoresByTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoresByTicketResponse)
	err := c.cc.Invoke(ctx, TicketScoring_GetScoresByTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketScoringClient) GetPeriodOverPeriodScoreChange(ctx context.Context, in *TimePeriodRequest, opts ...grpc.CallOption) (*PeriodOverPeriodScoreChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeriodOverPeriodScoreChangeResponse)
	err := c.cc.Invoke(ctx, TicketScoring_GetPeriodOverPeriodScoreChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketScoringServer is the server API for TicketScoring service.
// All implementations must embed UnimplementedTicketScoringServer
// for forward compatibility.
type TicketScoringServer interface {
	GetOverallQualityScore(context.Context, *TimePeriodRequest) (*OverallQualityScoreResponse, error)
	GetAggregatedCategoryScores(context.Context, *TimePeriodRequest) (*AggregatedCategoryScoresResponse, error)
	GetScoresByTicket(context.Context, *TimePeriodRequest) (*ScoresByTicketResponse, error)
	GetPeriodOverPeriodScoreChange(context.Context, *TimePeriodRequest) (*PeriodOverPeriodScoreChangeResponse, error)
	mustEmbedUnimplementedTicketScoringServer()
}

// UnimplementedTicketScoringServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketScoringServer struct{}

func (UnimplementedTicketScoringServer) GetOverallQualityScore(context.Context, *TimePeriodRequest) (*OverallQualityScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallQualityScore not implemented")
}
func (UnimplementedTicketScoringServer) GetAggregatedCategoryScores(context.Context, *TimePeriodRequest) (*AggregatedCategoryScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedCategoryScores not implemented")
}
func (UnimplementedTicketScoringServer) GetScoresByTicket(context.Context, *TimePeriodRequest) (*ScoresByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByTicket not implemented")
}
func (UnimplementedTicketScoringServer) GetPeriodOverPeriodScoreChange(context.Context, *TimePeriodRequest) (*PeriodOverPeriodScoreChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodOverPeriodScoreChange not implemented")
}
func (UnimplementedTicketScoringServer) mustEmbedUnimplementedTicketScoringServer() {}
func (UnimplementedTicketScoringServer) testEmbeddedByValue()                       {}

// UnsafeTicketScoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketScoringServer will
// result in compilation errors.
type UnsafeTicketScoringServer interface {
	mustEmbedUnimplementedTicketScoringServer()
}

func RegisterTicketScoringServer(s grpc.ServiceRegistrar, srv TicketScoringServer) {
	// If the following call pancis, it indicates UnimplementedTicketScoringServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketScoring_ServiceDesc, srv)
}

func _TicketScoring_GetOverallQualityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketScoringServer).GetOverallQualityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketScoring_GetOverallQualityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketScoringServer).GetOverallQualityScore(ctx, req.(*TimePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketScoring_GetAggregatedCategoryScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketScoringServer).GetAggregatedCategoryScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketScoring_GetAggregatedCategoryScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketScoringServer).GetAggregatedCategoryScores(ctx, req.(*TimePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketScoring_GetScoresByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketScoringServer).GetScoresByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketScoring_GetScoresByTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketScoringServer).GetScoresByTicket(ctx, req.(*TimePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketScoring_GetPeriodOverPeriodScoreChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketScoringServer).GetPeriodOverPeriodScoreChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketScoring_GetPeriodOverPeriodScoreChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketScoringServer).GetPeriodOverPeriodScoreChange(ctx, req.(*TimePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketScoring_ServiceDesc is the grpc.ServiceDesc for TicketScoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketScoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketscoring.v1.TicketScoring",
	HandlerType: (*TicketScoringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOverallQualityScore",
			Handler:    _TicketScoring_GetOverallQualityScore_Handler,
		},
		{
			MethodName: "GetAggregatedCategoryScores",
			Handler:    _TicketScoring_GetAggregatedCategoryScores_Handler,
		},
		{
			MethodName: "GetScoresByTicket",
			Handler:    _TicketScoring_GetScoresByTicket_Handler,
		},
		{
			MethodName: "GetPeriodOverPeriodScoreChange",
			Handler:    _TicketScoring_GetPeriodOverPeriodScoreChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/ticketscoring.proto",
}
